local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
Library.ForceCheckbox = true -- Force all toggles to use checkbox styling
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local Options = Library.Options
local Toggles = Library.Toggles

local AutoCollectEnabled = false
local DetectedPlotNumber = nil

local BrainrotPositions = {
    ["1"] = {
        Vector3.new(94.14, 10.00, 685.06), Vector3.new(94.17, 10.00, 697.73), Vector3.new(94.72, 10.00, 708.86),
        Vector3.new(83.93, 10.00, 709.10), Vector3.new(73.45, 10.00, 709.53), Vector3.new(63.27, 10.00, 708.81),
        Vector3.new(53.75, 10.00, 708.83), Vector3.new(53.23, 10.00, 697.41), Vector3.new(54.44, 10.14, 685.12),
    },
    ["2"] = {
        Vector3.new(-7.55, 10.24, 685.65), Vector3.new(-6.62, 10.24, 697.19), Vector3.new(-6.88, 10.24, 709.66),
        Vector3.new(-6.88, 10.24, 709.66), Vector3.new(-27.51, 10.24, 708.68), Vector3.new(-36.43, 10.24, 708.75),
        Vector3.new(-47.43, 10.24, 708.47), Vector3.new(-47.96, 10.24, 696.36), Vector3.new(-48.71, 10.24, 685.64),
    },
    ["3"] = {
        Vector3.new(-108.37, 10.24, 686.23), Vector3.new(-107.82, 10.24, 696.85), Vector3.new(-108.05, 10.24, 708.61),
        Vector3.new(-118.38, 10.24, 708.92), Vector3.new(-128.03, 10.24, 709.47), Vector3.new(-139.25, 10.24, 708.84),
        Vector3.new(-148.72, 10.24, 709.24), Vector3.new(-148.51, 10.24, 696.67), Vector3.new(-149.30, 10.24, 686.17),
    },
    ["4"] = {
        Vector3.new(-209.32, 10.24, 685.84), Vector3.new(-209.73, 10.24, 697.47), Vector3.new(-210.28, 10.24, 708.14),
        Vector3.new(-219.08, 10.24, 709.28), Vector3.new(-229.70, 10.24, 708.50), Vector3.new(-239.70, 10.24, 708.50),
        Vector3.new(-249.65, 10.24, 708.45), Vector3.new(-249.69, 10.24, 697.04), Vector3.new(-249.69, 10.24, 685.54),
    },
    ["5"] = {
        Vector3.new(-310.92, 10.00, 685.80), Vector3.new(-310.92, 10.00, 697.10), Vector3.new(-310.93, 10.00, 708.52),
        Vector3.new(-320.90, 10.00, 708.50), Vector3.new(-330.96, 10.00, 708.50), Vector3.new(-340.96, 10.00, 708.50),
        Vector3.new(-350.96, 10.00, 708.49), Vector3.new(-350.94, 10.00, 697.04), Vector3.new(-350.94, 10.00, 685.54),
    },
    ["6"] = {
        Vector3.new(-412.11, 10.24, 685.72), Vector3.new(-412.15, 10.24, 697.10), Vector3.new(-411.85, 10.24, 708.26),
        Vector3.new(-422.44, 10.24, 708.35), Vector3.new(-432.29, 10.24, 708.58), Vector3.new(-442.55, 10.24, 708.86),
        Vector3.new(-451.56, 10.24, 707.40), Vector3.new(-450.65, 10.24, 696.63), Vector3.new(-451.72, 10.24, 684.72),
    }
}

local function DetectCurrentPlot()
    local rayOrigin = humanoidRootPart.Position
    local rayDirection = Vector3.new(0, -20, 0)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    if raycastResult and raycastResult.Instance then
        local hitPart = raycastResult.Instance
        local current = hitPart
        while current do
            if current:IsA("Folder") and tonumber(current.Name) then
                if current.Parent and current.Parent.Name == "Plots" then
                    if current:FindFirstChild("Brainrots") then
                        return current.Name
                    end
                end
            end
            current = current.Parent
        end
    end
    return nil
end

local function TeleportToSpawnedBrainrots()
    if not DetectedPlotNumber then return end
    local positions = BrainrotPositions[DetectedPlotNumber]
    if not positions then return end
    local plotsFolder = workspace:FindFirstChild("Plots")
    if not plotsFolder then return end
    local plotFolder = plotsFolder:FindFirstChild(DetectedPlotNumber)
    if not plotFolder then return end
    local brainrotsFolder = plotFolder:FindFirstChild("Brainrots")
    if not brainrotsFolder then return end
    for i, pos in ipairs(positions) do
        local modelName = tostring(i)
        local model = brainrotsFolder:FindFirstChild(modelName)
        if model and model:IsDescendantOf(workspace) then
            local success, err = pcall(function()
                humanoidRootPart.CFrame = CFrame.new(pos.X, pos.Y + 5, pos.Z)
            end)
            if not success then
                warn("Teleport failed to model "..modelName..": "..tostring(err))
            end
            task.wait(0.5)
            if not AutoCollectEnabled then break end
        end
    end
end

local Window = Library:CreateWindow({
    Title = "RYTUX HUB",
    Footer = "v1.0",
    ShowCustomCursor = false,
    NotifySide = "Right",
})

local Tabs = {
    Main = Window:AddTab("Main", "home"),
    Settings = Window:AddTab("Settings", "settings"),
}

local FarmingGroup = Tabs.Main:AddLeftGroupbox("Farming", "sprout")

FarmingGroup:AddToggle("AutoBuySeed", {
    Text = "Auto Buy Seed",
    Default = false,
})

FarmingGroup:AddDropdown("SeedDropdown", {
    Values = {
        "Cactus Seed", "Strawberry Seed", "Pumpkin Seed", "Sunflower Seed", "Dragon Fruit Seed",
        "Eggplant Seed", "Watermelon Seed", "Grape Seed", "Cocotank Seed", "Mr Carrot Seed",
        "Tomatrio Seed", "Shroombino Seed"
    },
    Default = 1,
    Multi = false,
    Text = "Select Seed",
})

task.spawn(function()
    while task.wait(2) do
        if Toggles.AutoBuySeed.Value then
            local seed = Options.SeedDropdown.Value
            if seed then
                ReplicatedStorage.Remotes.BuyItem:FireServer(seed)
            end
        end
        if Library.Unloaded then break end
    end
end)

FarmingGroup:AddButton({
    Text = "Sell All Brainrots",
    Func = function()
        ReplicatedStorage.Remotes.ItemSell:FireServer()
    end,
})

local GearGroup = Tabs.Main:AddLeftGroupbox("Gear", "package")

GearGroup:AddDropdown("GearDropdown", {
    Values = {"Water Bucket", "Frost Grenade", "Banana Gun", "Frost Blower", "Carrot Launcher"},
    Default = 1,
    Multi = false,
    Text = "Select Gear",
})

GearGroup:AddButton({
    Text = "Buy Gear",
    Func = function()
        local gear = Options.GearDropdown.Value
        if gear then
            ReplicatedStorage.Remotes.BuyGear:FireServer(gear)
        end
    end,
})

GearGroup:AddButton({
    Text = "Equip Best Brainrot",
    Func = function()
        ReplicatedStorage.Remotes.EquipBestBrainrots:FireServer()
    end,
})

local CollectGroup = Tabs.Main:AddRightGroupbox("Auto Collect", "coins")

CollectGroup:AddButton({
    Text = "Detect Plot",
    Func = function()
        local plot = DetectCurrentPlot()
        if plot then
            DetectedPlotNumber = plot
            Library:Notify({
                Title = "Plot Detected",
                Description = "You are on Plot: "..plot,
                Time = 4,
            })
        else
            DetectedPlotNumber = nil
            Library:Notify({
                Title = "Detection Failed",
                Description = "No plot detected. Stand on a Grass model.",
                Time = 4,
            })
        end
    end,
})

CollectGroup:AddToggle("AutoCollectBrainrotMoney", {
    Text = "Auto Collect Money",
    Default = false,
    Callback = function(state)
        AutoCollectEnabled = state
        if state then
            local plot = DetectCurrentPlot()
            if plot then
                DetectedPlotNumber = plot
                Library:Notify({
                    Title = "Auto Collect Started",
                    Description = "Collecting on Plot: "..plot,
                    Time = 3,
                })
            else
                Library:Notify({
                    Title = "No Plot Detected",
                    Description = "Stand on grass and click Detect Plot first",
                    Time = 4,
                })
                Toggles.AutoCollectBrainrotMoney:SetValue(false)
                return
            end
            task.spawn(function()
                while AutoCollectEnabled and not Library.Unloaded do
                    TeleportToSpawnedBrainrots()
                    task.wait(1)
                end
            end)
        end
    end,
})

local MenuGroup = Tabs.Settings:AddLeftGroupbox("Menu", "settings")

MenuGroup:AddLabel("Menu Keybind"):AddKeyPicker("MenuKeybind", {
    Default = "RightShift",
    NoUI = true,
    Text = "Menu keybind"
})

MenuGroup:AddButton({
    Text = "Unload Script",
    Func = function()
        Library:Unload()
    end,
})

Library.ToggleKeybind = Options.MenuKeybind

-- Setup managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Comment this out to allow auto-loading theme
-- SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({"MenuKeybind"})

-- Your exact config and theme folder names, case-sensitive
ThemeManager:SetFolder("Rytux Theme")
SaveManager:SetFolder("Rytux Theme")

SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)

SaveManager:LoadAutoloadConfig()

if ThemeManager.ApplyTheme then
    ThemeManager:ApplyTheme()
else
    ThemeManager:ApplyToTab(Tabs.Settings)
end
